#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use IO::File;
use Iterator::FastaDb;
use Data::Dumper;

my $usage=<<'ENDHERE';
NAME:
generateFastaDBFromBlastCoord.pl

PURPOSE:
To construct an in silico db from a reference sequence database. This script takes the output of blast_primers_on_seq.pl as input.

INPUT:
--infile <tab_file> : output from blast_primers_on_seqs.pl
--ref_db <fasta_file> : database containing fasta seq on which the primer seq is to be compared
--amplicon_max_length : maximum length of amplicons
--amplicon_min_length : minimum length of amplicons
--mismatch_fwd : maximum accepted mismatches for fwd primer
--mismatch_rev : maximum accepted mismatches for rev primer
--fwd_primer_length : length of fwd primer
--rev_primer_length : length of rev primer

OUTPUT:
--outfile <fasta_file> : In silico fasta file containing sequences that met the parameters thresholds.
--outfile_failed <fasta_file> : file containing sequences that did not amplify

NOTES:

BUGS/LIMITATIONS:
This script takes into account align length and mismatch generated by the BLAST algorithm. It does not in any way consider any "biochemical parameters" such as salt concentration or Tm.
    
AUTHOR/SUPPORT:
Julien Tremblay - jtremblay514@gmail.com
ENDHERE

## OPTIONS
my ($help, $infile, $ref_db, $amplicon_max_length, $amplicon_min_length, $mismatch_fwd, $mismatch_rev, $fwd_primer_length, $rev_primer_length, $outfile, $outfile_failed);
my $verbose = 0;

## SCRIPTS
GetOptions(
    'infile=s'              => \$infile,
    'ref_db=s'              => \$ref_db,
    'amplicon_max_length=i' => \$amplicon_max_length,
    'amplicon_min_length=i' => \$amplicon_min_length,
    'mismatch_fwd=i'        => \$mismatch_fwd,
    'mismatch_rev=i'        => \$mismatch_rev,
    'fwd_primer_length=i'   => \$fwd_primer_length,
    'rev_primer_length=i'   => \$rev_primer_length,
    'outfile=s'             => \$outfile,
    'outfile_failed=s'      => \$outfile_failed,
    'verbose'               => \$verbose,
    'help'                  => \$help
);
if ($help) { print $usage; exit; }

## VALIDATE
die("--ref_db fasta reference database required\n") unless $ref_db;
die("--outfile outfile required\n") unless $outfile;
die("--amplicon_max_length arg required.\n") unless $amplicon_max_length;
die("--amplicon_max_length value must be higher or equal to 0\n") if($amplicon_max_length < 0);
die("--amplicon_min_length arg required.\n") unless $amplicon_min_length;
die("--amplicon_min_length value must be higher or equal to 0\n") if($amplicon_min_length < 0);
die("--amplicon_max_length must be higher than amplicon_min_length\n") if($amplicon_max_length < $amplicon_min_length);
die("--mismatch_fwd arg required.\n") unless $mismatch_fwd >= 0;
die("--mismatch_rev arg required.\n") unless $mismatch_rev >= 0;
die("--fwd_primer_length arg required.\n") unless $fwd_primer_length;
die("--rev_primer_length arg required.\n") unless $rev_primer_length;

## MAIN=====================================================================================================================================================================
open(IN, $infile) or die "Can't open file ".$!."\n";

my $subject_F;
my $align_length_F;
my $mismatch_F;
my $q_start_F;
my $s_start_F;

my $subject_R;
my $align_length_R;
my $mismatch_R;
my $q_start_R;
my $s_start_R;


#Put all coord into a hash.
my %hash = ();
while(<IN>){
    chomp($_);
    my @row = split(/\t/, $_);

    $hash{$row[0]} = $row[0].";".$row[1].";".$row[2].";".$row[3].";".$row[4].";".$row[5].";".$row[6].";".$row[7].";".$row[8].";".$row[9];
            
    #$array_fwd[0] = $row[0]; #subject
     #$array_fwd[1] = $row[1]; #align length
     #$array_fwd[2] = $row[2]; #mismatch
     #$array_fwd[3] = $row[3]; #q start
     #$array_fwd[4] = $row[4]; #s start

    #$array_rev[0] = $row[5]; #subject
     #$array_rev[1] = $row[6]; #align length
     #$array_rev[2] = $row[7]; #mismatch
     #$array_rev[3] = $row[8]; #q start
     #$array_rev[4] = $row[9]; #s start
}

print STDERR Dumper(\%hash);

open(OUT, ">".$outfile) or die "Can't open file ".$!."\n";
open(OUT_F, ">".$outfile_failed) or die "Can't open file ".$!."\n" if($outfile_failed);
my $ref_fasta_db = new Iterator::FastaDb($ref_db) or die("Unable to open Fasta file, $ref_db\n");

while( my $current_seq = $ref_fasta_db->next_seq() ) {
    $current_seq->header() =~ m/>(\S+)/i;
    my $header = $1;
    
    if(exists $hash{$header}){
    
        my @row = split(/;/, $hash{$header});
        
        $subject_F = $row[0]; #subject
         $align_length_F = $row[1]; #align length
         $mismatch_F = $row[2]; #mismatch
         $q_start_F = $row[3]; #q start
         $s_start_F = $row[4]; #s start

        $subject_R = $row[5]; #subject
         $align_length_R = $row[6]; #align length
         $mismatch_R = $row[7]; #mismatch
         $q_start_R = $row[8]; #q start
         $s_start_R = $row[9]; #s start

        #Modify mismatch values to reflect absolute mismatches regardless of alignment length.    
        $mismatch_F = ($fwd_primer_length - $align_length_F) + abs($mismatch_F); 
        $mismatch_R = ($rev_primer_length - $align_length_R) + abs($mismatch_R);
       
        #print STDERR "$q_start_F - $q_start_R\n";
        # print STDERR "$mismatch_F - $mismatch_R\n";
        # print STDERR "$mismatch_fwd - $mismatch_rev\n";

        if(    (($q_start_R - $q_start_F) < $amplicon_max_length) and 
               (($q_start_R - $q_start_F) > $amplicon_min_length) and
               ($q_start_R != 0) and 
               ($q_start_F != 0) and
               ($mismatch_F <= $mismatch_fwd) and
               ($mismatch_R <= $mismatch_rev)
        ){
            
            print OUT $current_seq->header()." (".$q_start_F."..".$q_start_R.")\n".substr($current_seq->seq(), $q_start_F, (($q_start_R)-($q_start_F)) )."\n";
        }else{
            print OUT_F $current_seq->header()."\n".$current_seq->seq()."\n" if($outfile_failed);
        }
    }    
}
#cleanup();
## =========================================================================================================================================================================
close(OUT);
close(OUT_F) if(defined $outfile_failed);
exit;
