#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;

my $usage=<<'ENDHERE';
NAME:
integrateHmmerDomblout.pl

PURPOSE:
Takes 2 or more dombplout generated by hmmer and merge.
Intended when hmmscan is performed against two diff. DBs
and we want to merge them.

INPUT:
--infiles <string> : DOMblout spreadsheets. separated by a ','
--n <int>          : Number of hits to keep (default:1).
--e <int>          : Evalue cutoff. Default = 1e-05
--ql <int>         : length cutoff. Default = 200

OUTPUT:
STDOUT

NOTES:

BUGS/LIMITATIONS:
 
AUTHOR/SUPPORT:
Julien Tremblay - jtremblay514@gmail.com

ENDHERE

## OPTIONS
my ($help, $infiles, $n, $e, $ql);
my $verbose = 0;

GetOptions(
  'infiles=s'  => \$infiles,
  'n=i'        => \$n,
  'e=f'        => \$e,
  'ql=i'       => \$ql,
  'verbose'    => \$verbose,
  'help'       => \$help
);
if ($help) { print $usage; exit; }

$e = '1e-05' unless($e);
$ql = 200 unless($ql);

## MAIN
my $header = "";
my %hash;
#my $i=1;
#my $j=0;

my @infiles = split(/,/, $infiles);

my $k=0;
my $end_header = 0;
foreach my $infile (@infiles){
   open(IN, "<".$infile) or die "Can't open $infile\n";
   while(<IN>){
     chomp;
     if($_ =~ m/^#/){
        $header .= $_."\n" if($end_header == 0);
        next;
     }
     $end_header = 1;
        
     my @row = (split /\s+/, $_);
     my $qlen = $row[5];
     my $id = $row[3];
     my $evalue = $row[6];
   
     #next if($evalue >= $e);
     #next if($qlen < $ql);
   
     if(exists $hash{$id}){
        # if exists, check who has the best value;
        my @row2 = (split /\s+/, $hash{$id});
        #my $qlen2 = $row2[5];
        #my $id2 = $row2[3];
        my $evalue2 = $row2[6];

        if($evalue <= $evalue2){
            $hash{$id} = $_;
        }else{
            next;
        }
         
     }else{
        $hash{$id} = $_;
     }  
   }
   $k++;
}

print STDOUT $header;

for my $k1 (sort keys %hash) { 
  print STDOUT $hash{$k1}."\n";
  #for my $k2 (sort keys %{ $hash{$k1} }){
  #  print STDOUT $hash{$k1}{$k2}."\n";

  #}
}
exit;
