#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Data::Dumper;

my $usage=<<'ENDHERE';
NAME:
slurmParser.pl

PURPOSE:

INPUT:
--infile <string> : slurm ourput generated by getSLURM.pl
				
OUTPUT:
STDOUT

NOTES:

BUGS/LIMITATIONS:
 
AUTHOR/SUPPORT:

Julien Tremblay - jtremblay514@gmail.com

ENDHERE

## OPTIONS
my ($help, $infile);
my $verbose = 0;

GetOptions(
   'infile=s' => \$infile,
   'verbose'  => \$verbose,
   'help'     => \$help
);
if ($help) { print $usage; exit; }

## MAIN
my %hash;
open(IN, "<".$infile) or die "Can't open $infile\n";
while(<IN>){
    chomp;
    if($_ =~ m/JobID/){
        my @row = split(/\s+/, $_);
        print STDOUT join("\t", @row)."\n";
    }


    if($_ =~ m/^\d+/){
        my @row = split(/\s+/, $_);
        if($_ =~ m/^\d+ / || $_ =~ m/^\d+_\d+ /){
            $hash{$row[0]}{name} = $row[1];    
        }elsif($_ =~ m/^(\d+_\d+).*\+/){
            shift(@row);
            shift(@row);
            my $new_row = join("\t", @row);
            $hash{$1}{value} = $new_row;
        }elsif($_ =~ m/^(\d+).*\+/){
            shift(@row);
            shift(@row);
            my $new_row = join("\t", @row);
            $hash{$1}{value} = $new_row;
        }
    }
}
close(IN);

print STDERR Dumper(%hash);

for my $key (keys %hash){
    print STDOUT $key."\t".$hash{$key}{name}."\t".$hash{$key}{value}."\n";
}
