#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Iterator::FastaDb;
use Iterator::FastqDb;
use Data::Dumper;

my $usage=<<'ENDHERE';
NAME:
getNcbiTax.pl

PURPOSE:

INPUT:
--blast_table <string>    : blast output table
--gi_to_tax <string>      : Link between gi id and tax id.
--names <string>          : names (names.dmp) file
--cutoff <float>          : cutoff at which tax will be declared valid.

OUTPUT:
STDOUT

NOTES:
#~/scripts/getNcbiTax.pl --blast_table ./myblast.table --gi_to_tax ./gi_taxid_nucl.dmp --names ../ncbi_tax2/taxa.sqlite.dmp > ./stdout.txt 2> stderr.txt

BUGS/LIMITATIONS:
 
AUTHOR/SUPPORT:
National Research Council - Biomonitoring
Julien Tremblay - julien.tremblay@nrc-cnrc.gc.ca

ENDHERE

## OPTIONS
my ($help, $blast_table, $gi_to_tax, $names, $cutoff);
my $verbose = 0;

GetOptions(
   'blast_table=s'    => \$blast_table,
   'gi_to_tax=s' 	    => \$gi_to_tax,
   'names=s' 	       => \$names,
   'cutoff=f'         => \$cutoff,
   'verbose' 	       => \$verbose,
   'help'             => \$help
);
if ($help) { print $usage; exit; }

die "--blast_table missing\n" unless($blast_table);
die "--gi_to_tax missing\n" unless($gi_to_tax);
die "--names missing\n" unless($names);
die "--cutoff missing\n" unless($cutoff);

## MAIN
my %hash_gi;
my %hash_gi_to_tax;
my %hash_evalues;

open(IN, "<".$blast_table) or die "Can't open $blast_table\n";
while(<IN>){
   chomp;
   my @row = split(/\t/, $_);
   my $subject = $row[1];
   $subject =~ m/gi\|(\d+)\|/;
   my $gi = $1;
   $hash_gi{$gi} = "";
   $hash_evalues{$row[0]} = $row[10];
}
close(IN);

print STDERR "Done reading blast table\n";
#print STDERR Dumper(\%hash_gi);

my %hash_tax;

open(IN, "<".$gi_to_tax) or die "Can't open $gi_to_tax\n";
while(<IN>){
   chomp;
   my @row = split(/\t/, $_);
   my $gi = $row[0];
   my $tax_id = $row[1];
   if(exists $hash_gi{$gi}){
      $hash_tax{$tax_id}{GI} = $gi;
      $hash_gi_to_tax{$gi}{TAXID} = $tax_id;
   }
}
close(IN);
print STDERR "Done reading gi_to_tax table\n";
#print STDERR Dumper(\%hash_tax);

my %hash_names;
open(IN, "<".$names) or die "Can't open $names\n";
while(<IN>){
   chomp;
   next if $_ =~ m/synonym/;
   my $string = $_;
   if($string =~ m/VALUES\((.*)\);/){
      my $match = $1; 
      $match =~ s/',/';/g;
      $match =~ s/,'/;'/g;
      $match =~ s/'//g;
      #print STDERR $match."\n";
      my @row = split(/;/, $match);
   
      my $row0 = $row[0];
      my @row0 = split(/,/, $row0);
      my $tax_id = $row0[0];
      my $name = $row[1];
      my $rank = $row[2];
      my $lineage = $row[3];
   
      $hash_names{$tax_id}{NAME} = $name;
      $hash_names{$tax_id}{RANK} = $rank;
      $hash_names{$tax_id}{LINEAGE} = $lineage;
   }
   #exit if($. > 10);
}
close(IN);
print STDERR "Done reading names sql dmp file\n";
#print STDERR Dumper(\%hash_names);

my %final_hash;

for my $tax_id (keys %hash_tax){
   
   if(exists $hash_names{$tax_id}){
  
      #print STDOUT $hash_names{$tax_id}{LINEAGE}."\n"; 
      my @lineage = split(/,/, $hash_names{$tax_id}{LINEAGE});
      foreach (@lineage){
         if(exists $hash_names{$_}){
             #print STDOUT $hash_names{$_}{RANK}."=>".$hash_names{$_}{NAME}.";";

            if($hash_names{$_}{RANK} eq "superkingdom"){
               $final_hash{$tax_id}{kingdom} = $hash_names{$_}{NAME};

            }elsif($hash_names{$_}{RANK} eq "phylum"){
               $final_hash{$tax_id}{phylum} = $hash_names{$_}{NAME};

            }elsif($hash_names{$_}{RANK} eq "class"){
               $final_hash{$tax_id}{class} = $hash_names{$_}{NAME};

            }elsif($hash_names{$_}{RANK} eq "order"){
               $final_hash{$tax_id}{order} = $hash_names{$_}{NAME};

            }elsif($hash_names{$_}{RANK} eq "family"){
               $final_hash{$tax_id}{family} = $hash_names{$_}{NAME};

            }elsif($hash_names{$_}{RANK} eq "genus"){
               $final_hash{$tax_id}{genus} = $hash_names{$_}{NAME};

            }elsif($hash_names{$_}{RANK} eq "species"){
               $final_hash{$tax_id}{species} = $hash_names{$_}{NAME};
            }
         }
      }
   }
}

print STDOUT "gene_id\tGI\tkingdom\tphylum\tclass\torder\tfamily\tgenus\tspecies\n";
open(IN, "<".$blast_table) or die "Can't open $blast_table\n";
while(<IN>){
   chomp;
   my @row = split(/\t/, $_);
   my $subject = $row[1];
   $subject =~ m/gi\|(\d+)\|/;
   my $gi = $1;
   my $geneid = $row[0];
     
   next if(!defined $hash_gi_to_tax{$gi}{TAXID}); 
   my $tax_id = $hash_gi_to_tax{$gi}{TAXID};
   next if(!defined $tax_id);
   next if($tax_id eq "");

   # Here make sure that gene id follows the following nomenclature: gene_id_\d+ or contig_id_\d+
   # rRNA_contig-1819000271_1551-3052_DIR-
   if($geneid =~ m/rRNA_contig-(\d+).*DIR/){
      $geneid = "contig-$1";
   }

   if($hash_evalues{$geneid} <= $cutoff){
      print STDOUT $geneid."\t";

      #for my $tax_id (keys %final_hash){
      print STDOUT $hash_tax{$tax_id}{GI}."\t";
      
      if(defined $final_hash{$tax_id}{kingdom}) { print STDOUT $final_hash{$tax_id}{kingdom}."\t";}  else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{phylum})  { print STDOUT $final_hash{$tax_id}{phylum}."\t";}   else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{class})   { print STDOUT $final_hash{$tax_id}{class}."\t";}    else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{order})   { print STDOUT $final_hash{$tax_id}{order}."\t";}    else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{family})  { print STDOUT $final_hash{$tax_id}{family}."\t";}   else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{genus})   { print STDOUT $final_hash{$tax_id}{genus}."\t";}    else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{species}) { print STDOUT $final_hash{$tax_id}{species}."\n";}  else { print STDOUT "NULL\n"; }
      #}
   }else{
      print STDOUT $geneid."\t";

      #for my $tax_id (keys %final_hash){
      print STDOUT $hash_tax{$tax_id}{GI}."\t";
      
      if(defined $final_hash{$tax_id}{kingdom}) { print STDOUT "NULL\t";} else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{phylum})  { print STDOUT "NULL\t";} else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{class})   { print STDOUT "NULL\t";} else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{order})   { print STDOUT "NULL\t";} else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{family})  { print STDOUT "NULL\t";} else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{genus})   { print STDOUT "NULL\t";} else { print STDOUT "NULL\t"; }
      if(defined $final_hash{$tax_id}{species}) { print STDOUT "NULL\n";} else { print STDOUT "NULL\n"; }
   
   }
}
close(IN);
