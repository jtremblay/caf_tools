#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Data::Dumper;
use Iterator::FastaDb;
use Iterator::FastqDb;
use File::Find;
use Cwd 'abs_path';

my $usage=<<'ENDHERE';
NAME:
validateMetabatBins.pl

PURPOSE:
Takes indirectory of metabin and generates a tsv file with each bins + percentages of each 
different order in each bins. If --split_bins_by_taxonomy <string> is set, only to up to
3 most abundant bins of that particular <string> will be kept.

INPUT:
--indir <string>                  : indir containing fasta files.
--taxonomy <string>               : taxonomy.tsv file (contigs tax file.)
--split_bins_by_taxonomy <string> : Either 'k__', 'p__', 'c__', 'o__', 'f__', 'g__' or 's__'
--outdir <string>                 : Outdir where to write new bins. 


OUTPUT:
STDOUT

NOTES:

BUGS/LIMITATIONS:
 
AUTHOR/SUPPORT:
National Research Council - Biomonitoring
Julien Tremblay - julien.tremblay@nrc-cnrc.gc.ca

ENDHERE

## OPTIONS
my ($help, $indir, $taxonomy, $split, $outdir);
my $verbose = 0;

GetOptions(
   'indir=s'    => \$indir,
   'outdir=s'   => \$outdir,
   'taxonomy=s' => \$taxonomy,
   'split=s'    => \$split,
   'verbose' 	 => \$verbose,
   'help'       => \$help
);
if ($help) { print $usage; exit; }

## VALIDATE
die "--indir is missing\n" unless($indir);
die "--outdir is missing\n" unless($outdir);
die "--taxonomy is missing\n" unless($taxonomy);

## MAIN
$indir = abs_path($indir);
$outdir = abs_path($outdir);

opendir(DIR, $indir);
my @files = grep(/\.fa$/,readdir(DIR));
closedir(DIR);

my @prefixes;
my @infiles;
foreach (@files){
   my $prefix = $_;
   $prefix =~ s{.*/}{};      # removes path  
   $prefix =~ s{\.[^.]+$}{}; # removes extension
   push(@prefixes ,$prefix);
   push(@infiles, $indir."/".$_);
   
}


my %hash_tax;
open(IN, "<".$taxonomy) or die "Can't open $taxonomy\n";
while(<IN>){
   chomp;
   my @row = split(/\t/, $_);
   my $contig_id = $row[0];
   my $species = join(".", $row[8]);
   my $lineage = join("\t", $row[2], $row[3], $row[4], $row[5], $row[6], $row[7], $species);
   
   $hash_tax{$contig_id} = $lineage;

}
close(IN);


# Parse fasta.
my %hash;

for my $fasta (@infiles){
   my $prefix = shift(@prefixes);

   my %seen;
   my $j = 0;
   my $k_seen = 0;
   my $p_seen = 0;
   my $c_seen = 0;
   my $o_seen = 0;
   my $f_seen = 0;
   my $g_seen = 0;
   my $s_seen = 0;

   my $ref_fasta_db = Iterator::FastaDb->new($fasta) or die("Unable to open Fasta file, $fasta\n");
   while( my $curr = $ref_fasta_db->next_seq() ) {
      my ($contig_id) = $curr->header =~ /^>(\S+)/;
      #$contig_id = $curr->header;
      $contig_id =~ s/^>//;
   
      if(exists $hash_tax{$contig_id}){
         my $lineage = $hash_tax{$contig_id};
         my @row = split(/\t/, $lineage);
         
         my $k = $row[0]; 
         my $p = $row[1]; 
         my $c = $row[2]; 
         my $o = $row[3]; 
         my $f = $row[4]; 
         my $g = $row[5]; 
         my $s = $row[6];

         if($split eq "k__"){
            if(exists $seen{$k}){
               $j = $j;   
            }else{
               $j++;
               $seen{$k} = $j;
            }
            open(OUT, ">$outdir/$prefix.$j-$k.fa");
            print OUT $curr->output."\n";
            close(OUT);
            $hash{$prefix}{$j}{$contig_id} = $contig_id."\t".$lineage."\n";

        }elsif($split eq "p__"){
            if(exists $seen{$p}){
               $j = $j;   
            }else{
               $j++;
               $seen{$p} = $j;
            }
            open(OUT, ">$outdir/$prefix.$j-$p.fa");
            print OUT $curr->output."\n";
            close(OUT);
            $p_seen = 1;
            $hash{$prefix}{$j}{$contig_id} = $contig_id."\t".$lineage."\n";

        }elsif($split eq "c__"){
            if(exists $seen{$c}){
               $j = $j;   
            }else{
               $j++;
               $seen{$c} = $j;
            }
            open(OUT, ">$outdir/$prefix.$j-$c.fa");
            print OUT $curr->output."\n";
            close(OUT);
            $c_seen = 1;
            $hash{$prefix}{$j}{$contig_id} = $contig_id."\t".$lineage."\n";

        }elsif($split eq "o__"){
            if(exists $seen{$o}){
               $j = $j;  # basically, do nothing. 
            }else{
               $j++;
               $seen{$o} = $j;
            }
            open(OUT, ">$outdir/$prefix.$j-$o.fa");
            print OUT $curr->output."\n";
            close(OUT);
            #$o_seen = 1;
            $hash{$prefix}{$j}{$contig_id} = $contig_id."\t".$lineage."\n";

        }elsif($split eq "f__"){
            if(exists $seen{$f}){
               $j = $j;   
            }else{
               $j++;
               $seen{$f} = $j;
            }
            open(OUT, ">$outdir/$prefix.$j-$f.fa");
            print OUT $curr->output."\n";
            close(OUT);
            $f_seen = 1;
            $hash{$prefix}{$j}{$contig_id} = $contig_id."\t".$lineage."\n";

        }elsif($split eq "g__"){
            if(exists $seen{$g}){
               $j = $j;   
            }else{
               $j++;
               $seen{$g} = $j;
            }
            open(OUT, ">$outdir/$prefix.$j-$g.fa");
            print OUT $curr->output."\n";
            close(OUT);
            $g_seen = 1;
            $hash{$prefix}{$j}{$contig_id} = $contig_id."\t".$lineage."\n";

        }elsif($split eq "s__"){
            if(exists $seen{$s}){
               $j = $j;   
            }else{
               $j++;
               $seen{$s} = $j;
            }
            open(OUT, ">$outdir/$prefix.$j-$s.fa"); 
            print OUT $curr->output."\n";
            close(OUT);
            $s_seen = 1;
            $hash{$prefix}{$j}{$contig_id} = $contig_id."\t".$lineage."\n";

        }
      }
   }
}

#print STDERR Dumper(\%hash);
for my $k1 (sort keys %hash) {
   for my $k2 (sort keys %{ $hash{$k1} }){
      for my $k3 (sort keys %{ $hash{$k1}{$k2} }){
         print STDOUT $k1.".".$k2."\t".$hash{$k1}{$k2}{$k3};
      }
   }
}

exit;
