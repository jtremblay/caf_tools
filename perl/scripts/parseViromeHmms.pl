#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Data::Dumper;

my $usage=<<'ENDHERE';
NAME:
parseViromeHmms.pl

PURPOSE:
Takes keeps best n hits from blast table.

INPUT:
--infile <string>                   : .tblout file
--infile_annotations <string>       : annotations file generated by the pipeline core
--infile_contigs_length <string>    : contigs lengths and gc
--e <int>                           : Evalue cutoff. Default = 1e-05
--length_cutoff <int>               : default 2kb. all contigs shorter than this cutoff are discarded.

OUTPUT:
STDOUT

NOTES:

BUGS/LIMITATIONS:
 
AUTHOR/SUPPORT:
Julien Tremblay - jtremblay514@gmail.com

ENDHERE

## OPTIONS
my ($help, $infile, $infile_annotations, $infile_contigs_length, $n, $e, $q, $a, $length_cutoff);
my $verbose = 0;

GetOptions(
  'infile=s'                => \$infile,
  'infile_contigs_length=s' => \$infile_contigs_length,
  'infile_annotations=s'    => \$infile_annotations,
  #'n=i'                    => \$n,
  'length_cutoff=i'         => \$length_cutoff,
  'e=f'                     => \$e,
  #'q=i'                    => \$q,
  #'a=i'                    => \$a,
  'verbose'                 => \$verbose,
  'help'                    => \$help
);
if ($help) { print $usage; exit; }

## MAIN

$length_cutoff = 2000 unless($length_cutoff);

my %hash;
my %hash_gene_to_contig;

# Parse length
open(IN, "<".$infile_contigs_length) or die "Can't open $infile_contigs_length\n";
while(<IN>){
    chomp;
    my @row = split(/\t/, $_);
    $hash{$row[0]}{length} = $row[1];
}
close(IN);

# 1st, parse annotations
open(IN, "<".$infile_annotations) or die "Can't open $infile_annotations\n";
while(<IN>){
    chomp;
    if($_ =~ m/^#/){
        next;
    }
    my @row = split(/\t/, $_);

    my $gene_id = $row[1];
    my $contig_id = $row[0];
    my $pfam = $row[9];
    my $kegg = $row[3];

    $hash{$contig_id}{no_of_genes}++; #because each row = 1 gene.
    $hash{$contig_id}{genes_with_pfams}++ if($pfam ne "NULL");
    $hash{$contig_id}{genes_with_KO}++ if($kegg ne "NULL");

    $hash_gene_to_contig{$gene_id} = $contig_id;

}

my $header = "";

$e = 1e-05 unless($e);

open(IN, "<".$infile) or die "Can't open $infile\n";
while(<IN>){
    chomp;
    if($_ =~ m/^#/){
        $header .= $_."\n";
        next;
    }

    my @row = split(/\s+/, $_);

    my $gene_id = $row[2];
    my $evalue = $row[4];

    next if($evalue >= $e);

    if(exists $hash_gene_to_contig{$gene_id}){
        my $contig_id = $hash_gene_to_contig{$gene_id};
        $hash{$contig_id}{hits_to_VPFs}++;
    }  
}

#print STDERR Dumper(\%hash);

print STDOUT "Contig_ID\thits_to_VPFs\tno_of_genes\tperc_covered_VPFs\tgenes_with_pfams\tperc_genesPfams\tgenes_with_KO\tperc_genesKO\tcontig_length\n";
for my $k (keys %hash) { 
        #print STDOUT $hash{$k}."\n";
        next if(!defined $hash{$k}{no_of_genes} || !defined $hash{$k}{length});
        next if($hash{$k}{length} < $length_cutoff);
        $hash{$k}{hits_to_VPFs} = 0 if(!defined $hash{$k}{hits_to_VPFs});
        $hash{$k}{genes_with_pfams} = 0 if(!defined $hash{$k}{genes_with_pfams});
        $hash{$k}{genes_with_KO} = 0 if(!defined $hash{$k}{genes_with_KO});

        $hash{$k}{perc_covered_VPFs} = ($hash{$k}{hits_to_VPFs} / $hash{$k}{no_of_genes}) * 100;
        $hash{$k}{perc_genesPfams} = ($hash{$k}{genes_with_pfams} / $hash{$k}{no_of_genes}) * 100;
        $hash{$k}{perc_genesKO} = ($hash{$k}{genes_with_KO} / $hash{$k}{no_of_genes}) * 100;

        print STDOUT $k."\t"; 
        print STDOUT $hash{$k}{hits_to_VPFs}."\t"; 
        print STDOUT $hash{$k}{no_of_genes}."\t"; 
        print STDOUT $hash{$k}{perc_covered_VPFs}."\t"; 
        print STDOUT $hash{$k}{genes_with_pfams}."\t"; 
        print STDOUT $hash{$k}{perc_genesPfams}."\t"; 
        print STDOUT $hash{$k}{genes_with_KO}."\t"; 
        print STDOUT $hash{$k}{perc_genesKO}."\t"; 
        print STDOUT $hash{$k}{length}."\n"; 
}
exit;

