#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Statistics::Descriptive;
use File::Basename;

my $usage=<<'ENDHERE';
NAME:
multipleRarefactionsEvenDepth.pl

PURPOSE:
Feature tables rarefaction wrapper. Takes in input multiple Feature tables and
rarefy it to the lowest value of all the Feature tables. Implements the
single_rarefaction.py from Qiime.
Either specify --n <int> or --threshold_zscore <float> --threshold_minreads <int>

INPUT:
--infile <string>          : Feature table in Biom format.
                             Can be multiple infile.
--infile_tsv <string>      : Feature table in Qiime (tsv) format.
--threshold_zscore <float> : Z-score to be used in determining which samples 
                             should be left out when performing rarefaction of Feature
                             table. Suggested_value = 0.98
--threshold_minreads <int> : If the rarefaction value found by the Z-score is above
                             the specified int value, the sample with the minimum number of reads
						     above that specified int value will be picked as rarefaction value.
--n <int>                  : If table is to be rarefied at <int> reads. Suggested value: 10000
                             If --n <int> is specified along with --threshold <float> arg, the 
                             value found/determined by the script will take priority over the
                             specified --n <int> value. IOW, --n <int> will have no effects.
--step <int>               : Incrementation values in performing rarefactions. 
--permutations <int>       : Number of permutations. Default = 10.
--num_threads <int>        : Num threads.

OUTPUT:
--outdir <string>          : Filtered feature table in Qiime format
                             Must be the same number if outfile
                             as infiles.

NOTES:
Please make sure that the two header lines of the Feature table is 
properly formatted. For instance:

#Full Feature Counts
#FEATURE_ID<tab>sampleA<tab>sampleB<tab>sampleC<tab>sampleD<tab>sampleE<tab>sampleF<tab>sampleG<tab>taxonomy 

Scripts needs Qiime 1.9x + R with packages data.table and outliers

BUGS/LIMITATIONS:

AUTHOR/SUPPORT:

Genomics and Microbiomes
Julien Tremblay - jtremblay514@gmail.com
ENDHERE

## OPTIONS
my ($help, $infile, $infile_tsv, $outdir, $step, $threshold_zscore, $threshold_minreads, $n, $perm, $num_threads, $outfile_stats);
my $verbose = 0;

GetOptions(
  'infile=s'             => \$infile,
  'infile_tsv=s'         => \$infile_tsv,
  'outdir=s'             => \$outdir,
  'threshold_zscore=f'   => \$threshold_zscore,
  'threshold_minreads=i' => \$threshold_minreads,
  'outfile_stats=s'      => \$outfile_stats,
  'n=i'                  => \$n,
  'permutations=i'       => \$perm,
  'step=i'               => \$step,
  'num_threads=i'        => \$num_threads,
  'verbose'              => \$verbose,
  'help'                 => \$help
);
if ($help) { print $usage; exit; }

## VALIDATE
die("--infile file required\n") unless $infile;
die("--outdir outdir required\n") unless $outdir;
die("--step step required\n") unless $step;
$perm = 10 unless($perm);
$num_threads = 1 unless($num_threads);

# Will need to call multiple_rarefactions.py from Qiime
my $multipleRarefactions = `which multiple_rarefactions.py`; die if(!defined($multipleRarefactions)); chomp $multipleRarefactions;

## MAIN

# If a threshold is specified, we want to exclude samples having less than x% of the total reads of all samples.
if($threshold_zscore && $threshold_minreads ){

    die "Please specify a --stats_outfile <string> arg...\n" unless($outfile_stats);
    # Call R to find rarefaction threshold.
	my $command = "findOutliers.R -i $infile_tsv -p $threshold_zscore -m $threshold_minreads > $outfile_stats\n";
    print STDERR "Executing: $command\n";
    system($command);
    $? != 0 ? die "command failed: $!\n" : print STDERR $command." done!\n"; 


	# Find rarefaction value in the outfile_stats generated by findOutliers.R
	open(IN, "<".$outfile_stats) or die "Can't open $outfile_stats\n";  
	my $n = 0;
	while(<IN>){
		chomp;
		if($_ =~ m/\"THRESHOLD: (\d+)\"/g){
			$n = $1;
		}
	}
	close(IN);
	die "Something went wrong with finding the rarefaction value...\n" if($n == 0);
 
    print STDERR "Performing rarefaction at baseline <".$n."> for each tables.\n" if($verbose);    
    
    # Then, normalize all tables upon that value.
    # Run single_rarefactions.py 
    my $cmd = "parallel_multiple_rarefactions.py";
    $cmd .= " -i ".$infile;
    $cmd .= " -m ".$n;
    $cmd .= " -x ".$n;
    $cmd .= " -s ".$step;
    $cmd .= " -n ".$perm;
    $cmd .= " -o ".$outdir."/";
    $cmd .= " -O ".$num_threads;
    print STDERR $cmd."\n";
    system($cmd);
    $? != 0 ? die "command failed: $!\n" : print STDERR $cmd." done!\n"; 

}else{

    my $cmd = "parallel_multiple_rarefactions.py";
    $cmd .= " -i ".$infile;
    $cmd .= " -m ".$n;
    $cmd .= " -x ".$n;
    $cmd .= " -s ".$step;
    $cmd .= " -n ".$perm;
    $cmd .= " -o ".$outdir."/";
    $cmd .= " -O ".$num_threads;
    print STDERR $cmd."\n";
    system($cmd);
    $? != 0 ? die "command failed: $!\n" : print STDERR $cmd." done!\n"; 
}
